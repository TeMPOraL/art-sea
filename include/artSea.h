/*
-----------------------------------------------------------------------------
Filename:    artSea.h
-----------------------------------------------------------------------------

This source file is generated by the Ogre AppWizard.

Check out: http://conglomerate.berlios.de/wiki/doku.php?id=ogrewizards

Based on the Example Framework for OGRE
(Object-oriented Graphics Rendering Engine)

Copyright (c) 2000-2007 The OGRE Team
For the latest info, see http://www.ogre3d.org/

You may use this sample code for anything you like, it is not covered by the
LGPL like the rest of the OGRE engine.
-----------------------------------------------------------------------------
*/
#ifndef __artSea_h_
#define __artSea_h_


#include "BaseApplication.h"

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#include "../res/resource.h"
#endif

#include <CEGUI.h>
#include <CEGUISystem.h>
#include <CEGUISchemeManager.h>
#include <OgreCEGUIRenderer.h>

//#include <Hydrax/Hydrax.h>

#include <TwOgre.h>
#include "ergoTwGui.h"

const char* ARTSEA_LOG_FILE_NAME = "artSea.log";


class artSeaApp : public BaseApplication
{
public:
	artSeaApp(void);
	virtual ~artSeaApp(void);

protected:
	//overloads from BaseApplication
	virtual void createScene(void);
	virtual bool frameStarted(const FrameEvent& evt);
	virtual bool frameRenderingQueued(const FrameEvent& evt);
	virtual bool setup();
	virtual void chooseSceneManager(void);

	virtual bool keyPressed( const OIS::KeyEvent &arg );
	virtual bool keyReleased( const OIS::KeyEvent &arg );
	virtual bool mouseMoved( const OIS::MouseEvent &arg );
	virtual bool mousePressed( const OIS::MouseEvent &arg, OIS::MouseButtonID id );
	virtual bool mouseReleased( const OIS::MouseEvent &arg, OIS::MouseButtonID id );

protected:

	void requestSimulationStateUpdate(Real deltaT);

	void updateWorld(Real deltaT);


protected:
	//Member variables
	Real fixedStepTimeAccumulator;
	Real fixedStepRate;	//an update will be scheduled every fixedStepRate seconds

	Real fixedStepDTMax;	//maximum deltaTime between frames - deltaT received from timer
							//will be clamped to [0, fixedStepDTMax] -  if the game
							//starts to lag real badly, then the simulation will also slow down
	Real fixedStepMaxUpdatesPerFrame;	//maximum updates per single frame - accumulator will be
							//clamped to [0, fixedStepRate*fixedStepMaxUpdatesPerFrame] - without
							//this if a single simulation update always took more than fixedStepRate seconds,
							//then we would have a massive and fatal buildup of simulation updates, leaving no
							//time for rendering

//	Hydrax::Hydrax* hydraxModule;	//module for realistic rendering of underwater environment

	ergoTw::TweakBarSupervisor* tweakBarSupervisor;

	ergoTw::TweakBar *testTweakBar;
	TwOgre::Window* testTweakWindow;

	//AntTweakBar testing
	TwOgre::ColorVariable *mWindowColor;
	TwOgre::IntegerVariable *mWindowPosX, *mWindowPosY;
	TwOgre::StringVariable *mWindowName;
	
	Ogre::Real testSharedReal;
	Ogre::String testSharedString;


};


#endif // #ifndef __artSea_h_